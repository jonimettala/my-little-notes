{"version":3,"sources":["NavBar.js","services/notes.js","NoteCard.js","NoteList.js","EditNote.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","flexGrow","title","NavBar","showImportantOnly","setShowImportantOnly","classes","toggleImportant","className","AppBar","position","Toolbar","Typography","component","Link","to","color","variant","exact","path","Button","onClick","baseUrl","axios","get","then","response","data","id","newObject","post","content","important","put","delete","width","margin","bullet","display","transform","timestamps","fontSize","marginLeft","pos","marginBottom","note","whiteSpace","NoteCard","handleDelete","Grid","container","item","xs","lg","Card","CardContent","CardActions","direction","gutterBottom","moment","added","format","updated","size","NoteList","useState","notes","setNotes","loading","setLoading","connectionError","setConnectionError","useEffect","noteService","initNotes","catch","err","status","window","confirm","newNotes","noteIndex","splice","alert","length","filter","map","field","button","EditNote","editing","useParams","setTitle","setContent","setImportant","titleError","setTitleError","contentError","setContentError","redirectToList","setRedirectToList","fetchedNote","setFetchedNote","loadingFailed","setLoadingFailed","noValidate","autoComplete","onSubmit","e","preventDefault","TextField","defaultValue","onChange","target","value","label","fullWidth","error","multiline","rows","FormControlLabel","control","Checkbox","icon","checkedIcon","name","checked","type","endIcon","App","sm","md","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7091c4dd.chunk.js","sourcesContent":["import React from 'react'\nimport { Link, Route } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1\n  },\n  title: {\n    flexGrow: 1\n  }\n}))\n\nexport default function NavBar ({ showImportantOnly, setShowImportantOnly }) {\n  const classes = useStyles()\n\n  const toggleImportant = () => {\n    setShowImportantOnly(!showImportantOnly)\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography component={Link} to={'/'} color='inherit' variant='h6' className={classes.title}>\n            My Little Notes\n          </Typography>\n          <Route exact path='/'>\n            {showImportantOnly\n              ? <Button onClick={toggleImportant} color='inherit'>Show Everything</Button>\n              : <Button onClick={toggleImportant} color='inherit'>Show Important Only</Button>}\n            <Button component={Link} to={'/add'} color='inherit'>Add Note</Button>\n          </Route>\n          <Route exact path='/add'>\n            <Button component={Link} to={'/'} color='inherit'>Cancel</Button>\n          </Route>\n          <Route exact path='/note/:id'>\n            <Button component={Link} to={'/'} color='inherit'>Cancel</Button>\n          </Route>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\n","import axios from 'axios'\n\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst get = (id) => {\n  const request = axios.get(baseUrl + `/${id}`)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, title, content, important) => {\n  const request = axios.put(baseUrl + `/${id}`, { title: title, content: content, important: important })\n  return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n  const request = axios.delete(baseUrl + `/${id}`)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, get, create, update, remove }\n","import React from 'react'\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid, Card, CardActions, CardContent, Button, Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    margin: 10\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)'\n  },\n  timestamps: {\n    fontSize: 14,\n    marginLeft: 10\n  },\n  pos: {\n    marginBottom: 12\n  },\n  note: {\n    whiteSpace: 'pre-wrap'\n  }\n})\n\nconst NoteCard = ({ note, handleDelete }) => {\n  const classes = useStyles()\n\n  return (\n    <Grid container item xs={12} lg={6}>\n      <Card className={classes.root} variant=\"outlined\">\n        <CardContent>\n          <Typography variant=\"h5\" component=\"h2\">\n            {note.title}\n          </Typography>\n          <Typography className={classes.note} variant=\"body2\" component=\"p\">\n            {note.content}\n          </Typography>\n        </CardContent>\n        <CardActions>\n          <Grid container direction='column'>\n          <Typography className={classes.timestamps} color=\"textSecondary\" gutterBottom>\n              added: {moment(note.added).format('llll')}\n              {note.updated !== null ? <><br />modified: {moment(note.updated).format('llll')}</> : <></>}\n            </Typography>\n          <Grid container>\n          <Button component={Link} to={`/note/${note.id}`} size=\"small\">Edit</Button>\n          <Button onClick={() => handleDelete(note.id)} size=\"small\">Delete</Button>\n          </Grid>\n          </Grid>\n        </CardActions>\n      </Card>\n    </Grid>\n  )\n}\n\nexport default NoteCard\n","import React, { useEffect, useState } from 'react'\n\nimport noteService from './services/notes'\nimport NoteCard from './NoteCard'\n\nconst NoteList = ({ important }) => {\n  const [notes, setNotes] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [connectionError, setConnectionError] = useState(false)\n\n  const fetchNotes = () => {\n    noteService\n      .getAll()\n      .then(initNotes => {\n        setNotes(initNotes)\n        setLoading(false)\n      })\n      .catch((err) => {\n        setLoading(false)\n\n        if (err.response.status === 500) {\n          setConnectionError(true)\n        }\n      })\n  }\n  useEffect(fetchNotes, [])\n\n  const handleDelete = (id) => {\n    const wantsDelete = window.confirm('Are you sure you want to delete the note?')\n    if (wantsDelete) {\n      noteService\n        .remove(id)\n        .then(() => {\n          const newNotes = notes\n          let noteIndex = 0\n          for (const note of newNotes) {\n            if (note.id === id) {\n              newNotes.splice(noteIndex, 1)\n            }\n            noteIndex++\n          }\n          setNotes([...newNotes])\n        })\n        .catch((err) => {\n          if (err.response.status === 500) {\n            window.alert('Failed to reach the server')\n          } else {\n            window.alert('The note has been already deleted')\n            const newNotes = notes\n            let noteIndex = 0\n            for (const note of newNotes) {\n              if (note.id === id) {\n                newNotes.splice(noteIndex, 1)\n              }\n              noteIndex++\n            }\n            setNotes([...newNotes])\n          }\n        })\n    }\n  }\n  if (loading) {\n    return <p>Loading</p>\n  } else if (connectionError) {\n    return <p>Failed to reach the server.</p>\n  } else if (notes.length === 0) {\n    return <p>No notes to show.</p>\n  } else if (important === true) {\n    const notesToShow = notes.filter((note) => note.important === true)\n    return notesToShow.map((note) => <NoteCard key={note.id} note={note} handleDelete={handleDelete} />)\n  } else {\n    return notes.map((note) => <NoteCard key={note.id} note={note} handleDelete={handleDelete} />)\n  }\n}\n\nexport default NoteList\n","import React, { useState, useEffect } from 'react'\nimport { Redirect, useParams } from 'react-router-dom'\nimport { makeStyles, Grid, TextField, Button, FormControlLabel, Checkbox } from '@material-ui/core'\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight'\nimport StarIcon from '@material-ui/icons/Star'\nimport StarBorderIcon from '@material-ui/icons/StarBorder'\n\nimport noteService from './services/notes'\n\nconst useStyles = makeStyles({\n  root: {\n    flexGrow: 1\n  },\n  field: {\n    margin: 10,\n    display: 'block'\n  },\n  button: {\n    margin: 10\n  }\n})\n\nconst EditNote = ({ editing }) => {\n  const { id } = useParams()\n\n  const classes = useStyles()\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n  const [important, setImportant] = useState(false)\n  const [titleError, setTitleError] = useState(false)\n  const [contentError, setContentError] = useState(false)\n  const [redirectToList, setRedirectToList] = useState(false)\n  const [fetchedNote, setFetchedNote] = useState({})\n  const [loading, setLoading] = useState(editing)\n  const [loadingFailed, setLoadingFailed] = useState(false)\n  const [connectionError, setConnectionError] = useState(false)\n\n  const fetchNote = () => {\n    noteService\n      .get(id)\n      .then(note => {\n        setFetchedNote(note)\n        setTitle(note.title)\n        setContent(note.content)\n        setImportant(note.important)\n        setLoading(false)\n      })\n      .catch((err) => {\n        setLoading(false)\n        setLoadingFailed(true)\n\n        if (err.response.status === 500) {\n          setConnectionError(true)\n        }\n      })\n  }\n  if (editing) {\n    useEffect(fetchNote, [])\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setTitleError(false)\n    setContentError(false)\n\n    if (!title && !content) {\n      setTitleError(true)\n      setContentError(true)\n    } else if (!editing) {\n      noteService\n        .create({\n          title: title,\n          content: content,\n          important: important\n        })\n        .then(() => {\n          setRedirectToList(true)\n        })\n        .catch(() => {\n          window.alert('Failed to reach the server. Please try again later.')\n        })\n    } else {\n      noteService\n        .update(id, title, content, important)\n        .then(() => {\n          setRedirectToList(true)\n        })\n        .catch(() => {\n          window.alert('Failed to reach the server. Please try again later.')\n        })\n    }\n  }\n\n  if (redirectToList) {\n    return <Redirect to={'/'} />\n  } else if (connectionError) {\n    return <p>Failed to reach the server.</p>\n  } else if (loading) {\n    return <p>Loading</p>\n  } else if (loadingFailed) {\n    return <p>Note not found</p>\n  } else {\n    return (\n      <Grid container item xs={12}>\n          <form className={classes.root} noValidate autoComplete='off' onSubmit={handleSubmit}>\n            <TextField\n              defaultValue={fetchedNote.title}\n              onChange={(e) => { setTitle(e.target.value) }}\n              className={classes.field}\n              label='Title'\n              variant='outlined'\n              fullWidth={true}\n              error={titleError}\n            />\n            <TextField\n              defaultValue={fetchedNote.content}\n              onChange={(e) => { setContent(e.target.value) }}\n              className={classes.field}\n              label='Content'\n              variant='outlined'\n              multiline\n              rows='6'\n              fullWidth\n              error={contentError}\n            />\n            <FormControlLabel\n              className={classes.button}\n              onChange={() => { setImportant(!important) }}\n              control={\n                <Checkbox\n                  icon={<StarBorderIcon />}\n                  checkedIcon={<StarIcon />}\n                  name=\"Important\"\n                  checked={important}\n                />}\n              label=\"Important\"\n            />\n            <Button\n              className={classes.button}\n              type='submit'\n              variant='contained'\n              endIcon={<KeyboardArrowRightIcon />}\n            >\n              Save\n            </Button>\n          </form>\n        </Grid>\n    )\n  }\n}\n\nexport default EditNote\n","import React, { useState } from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Grid from '@material-ui/core/Grid'\n\nimport './App.css'\nimport NavBar from './NavBar'\nimport NoteList from './NoteList'\nimport EditNote from './EditNote'\n\nconst App = () => {\n  const [showImportantOnly, setShowImportantOnly] = useState(false)\n\n  return (\n    <Router>\n      <NavBar showImportantOnly={showImportantOnly} setShowImportantOnly={setShowImportantOnly} />\n      <Grid container direction='column'>\n        <Grid container>\n          <Grid item xs={false} sm={1} md={2} />\n          <Grid item container xs={12} sm={10} md={8}>\n            <Switch>\n            <Route exact path='/'>\n                <NoteList important={showImportantOnly} />\n              </Route>\n              <Route exact path='/add'>\n                <EditNote editing={false} />\n              </Route>\n              <Route exact path='/note/:id'>\n                <EditNote editing={true}/>\n              </Route>\n            </Switch>\n          </Grid>\n          <Grid item xs={false} sm={1} md={2} />\n        </Grid>\n      </Grid>\n    </Router>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}